
@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<button id="facebook-login">Facebook login</button>

<script src="https://code.jquery.com/jquery-3.2.1.min.js"
        integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
        crossorigin="anonymous"></script>

<script>
	/*
		FACEBOOK LOGIN PROCESS:

		1 - Fetch external login provider URL's from the backend.
				(/api/Account/ExternalLogins?returnUrl)

		2 - Open a popup with the URL fetched in step 1, to display the external login screen.
				When the user logs in the popup window gets redirected back to a specified return
				URL with an access token appended as a hash parameter. The access token is extracted
				from the URL and the popup window is closed.
				(/api/Account/ExternalLogin?provider)

		3 - Determine if a user exists in the backend system matching the external login.
				(/api/Account/UserInfo)

				3A.1 -	If the user does not exist, register it in the backend system by calling
								the RegisterExternal method. This will create a new user instance in the
								database on the backend.
								(/api/Account/RegisterExternal)

				3A.2 -	Log the user in as the newly created user. This is done by calling the
								ExternalLogin method once more and extracting the new access token.
								(/api/Account/ExternalLogin?provider)

		4 -	Fetch Authorized resource from the backend using the access token.

	*/

    var apiUrl = 'http://localhost:52146';
    var loginPopup; // shared reference for a popup that will be reused during the login flow. If the window is not reused, the browser will block it.
	// function that runs when the site starts up.
    var loadedUrl;

	function startup() {
        console.log('startup');

        // open a popup window that will be used to show the facbook login page.
        // It is opened on the same origin as the client so it will not be blocked by the browser
        loginPopup = window.open(window.location.origin, name, 'width=560,height=340,toolbar=0,menubar=0,location=0');

		if (localStorage.getItem('access_token')) {
			onFacebookAuthenticated(localStorage.getItem('access_token'));
		} else {
		    getExternalLoginUrl(function (fbLoginUrl) {
                authenticateWithFacebook(fbLoginUrl, onFacebookAuthenticated);
		    });
        }
        console.log('FINISH');
        
	}

	// Authenticate with Facebook
    function authenticateWithFacebook(fbLoginUrl, callback) {
        console.log('authenticateWithFacebook');

        // Add an event listener to the popup that will listen for load events and then extract the access token from the URL      
        // I don't use the 'load' event because it does not refire when I reuse the popup. Neither does the 'hashchange' event.
        var interval = setInterval(function () {
            if (loadedUrl !== loginPopup.location.href) {
                loadedUrl = loginPopup.location.href;

                var queryParams = loginPopup.location.hash.match(/\#(?:access_token)\=([\S\s]*?)\&/);
                var token;

                if (queryParams) {
                    token = queryParams[1]
                } else {
                    return;
                }

                // invoke callback with the token;
                if (callback) {
                    callback(token, fbLoginUrl);
                }
                clearInterval(interval);
            }
        }, 50);

        // then change the location of the popup to the login enpoint of the API to initiate the login flow.
        loginPopup.location.href = apiUrl + fbLoginUrl;
        
        if (window.focus) { loginPopup.focus() }
	}

    /*
        Fetches the Facebook login url from the backend.
        Every login option will come with a URL matching an endpoint on the backend
        which must be called to retrieve the login screen for the federated login.
        OBS!!! This functions fetches the URL synchronously, otherwise the popup window will be blocked by the browser.
    */
    function getExternalLoginUrl(callback) {
        // Return URL for an HTML app is just a local page. This page does NOT need to exist in the app.
        // BUT the return URL has to be in the same domain in order to attach on load eventlisteners.
        returnUrl = window.location.origin + '/oauthcallback/';

        $.ajax({
            url: apiUrl + "/api/Account/ExternalLogins",
            data: { returnUrl: returnUrl },
            success: function (response) {
                console.log('getExternalLoginUrl - response', response);

                if (callback) {
                    // get the facebook url. Facebook is the first of the returned external login providers
                    var fbLoginUrl = response[0].Url || response[0].url;
                    callback(fbLoginUrl);
                }
            },
            async: false // Fetch the loginUrl synchronously to avoid blocking the popup window that will be opened in the 'authenticateWithFacebook' function
        });
    }

	// When the user has been authenticated and an auth token is retrieved this method is invoked
	function onFacebookAuthenticated(accessToken, fbLoginUrl) {
		console.log('onFacebookAuthenticated', accessToken);

		if (!accessToken) {
			alert('Failed retrieving the Facebook access token');
			return;
		}

		// Store the access token
		localStorage.setItem('access_token', accessToken);

		determineUserExistance(accessToken, fbLoginUrl);
	}

	// Gets the details about a user from the backend.
	function getUserInfo(callback) {
		console.log('getUserInfo');

		$.ajax({
            url: apiUrl + '/api/Account/UserInfo',
            type: 'GET',
            async: false,
			headers: {'Authorization': 'Bearer ' + localStorage.getItem('access_token')},
			success: function (response) {
				console.log('getUserInfo - response', response);

				if (callback) {
					callback(response);
				}
			}
		});
	}


	// Checks if a user exists and if not, initiates the register flow
	function determineUserExistance(accessToken, fbLoginUrl) {
		console.log('determineUserExistance');
		getUserInfo(function (userInfo) {
            if (userInfo && (userInfo.HasRegistered || userInfo.hasRegistered)) {
                loginPopup.close();
				// If the user exists in the backend, log the user in
				console.log('determineUserExistance - user exists', userInfo);
				getAuthorizedResource();
			} else {
				// Else take the user through the registration flow
				console.log('determineUserExistance - user NON-existing', userInfo);
                registerExternalUser(userInfo, function () {
                    authenticateWithFacebook(fbLoginUrl, onFacebookAuthenticated);
				});
			}
		});
	}

	// Registers a new user in the backend using the facebook access token
	function registerExternalUser(userInfo, callback) {
		console.log('RegisterExternalUser');

		// Get the users Facebook email or let them type in a new email
		var userEmail = 'anders@facebook.com';

		$.ajax({
            url: apiUrl + '/api/Account/RegisterExternal',
			data: {
				email: userEmail
            },
            xhrFields: {
                withCredentials: true    // Setting this parameter is critical for making the authentication work cross domain
            },
            async: false,
			type: 'POST',
			headers: { 'Authorization': 'Bearer ' + localStorage.getItem('access_token') },
			success: function (response) {
                console.log('registerExternalUser - response', response);

				if (callback) {
					callback();
				}
			}
		});
	}


	// Logs an external user in to our system. Before doing this you have to authorize with facebook and register the user with our system.
	function loginExternalUser(facebookLoginUrl, callback) {
		console.log('loginExternalUser');

		$.ajax({
            url: apiUrl + facebookLoginUrl,
			type: 'GET',
			success: function (response) {
				console.log('loginExternalUser - response', response);

				if (callback) {
					callback();
				}
			}
		});
	}


	// Gets a resource from the backend api that requires that you are authorized
	function getAuthorizedResource() {
		console.log('getAuthorizedResource');

		$.ajax({
            url: apiUrl + '/api/Values',
			type: 'GET',
			headers: { 'Authorization': 'Bearer ' + localStorage.getItem('access_token') },
			success: function (response) {
				console.log('getAuthorizedResource - response', response);
			}
		});
	}

	// Gets the facebook users data. To be used when creating a backend user.
	function getFacebookUserData() {

	}

	$(document).ready(function () {
		$('#facebook-login').click(startup);
	});

</script>
