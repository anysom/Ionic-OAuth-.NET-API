<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS, and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>
<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach
        a broad range of clients, including browsers and mobile devices. ASP.NET Web API
        is an ideal platform for building RESTful applications on the .NET Framework.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301870">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301871">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Web Hosting</h2>
        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301872">Learn more &raquo;</a></p>
    </div>
</div>

<div class="row">
	<div class="col-sm-12">
		<button id="facebook-login">Facebook login</button>
	</div>
</div>

<script src="https://code.jquery.com/jquery-3.2.1.min.js"
				integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
				crossorigin="anonymous"></script>

<script>
	var baseUrl = '/';
	// function that runs when the site starts up.
	function startup() {
		console.log('startup');

		// if authorized, fetch secret resource
		if (localStorage.getItem('access_token')) {
			getAuthorizedResource();
		} else {
			getExternalLoginUrl(function (fbLoginUrl) {
				authenticateWithFacebook(fbLoginUrl, onFacebookAuthenticated);
			});
		}
	}

	// Authenticate with Facebook
	function authenticateWithFacebook(fbLoginUrl, callback) {
		console.log('authenticateWithFacebook');

		var newwindow;
		// WINDOW POPUP VERSION
		function createPop(url, name) {
			newwindow = window.open(url, name, 'width=560,height=340,toolbar=0,menubar=0,location=0');
			newwindow.addEventListener('load', function (e) {
				console.log('popup loaded', e);

				// get access token from url
				var queryParams = e.path[0].location.hash.match(/\#(?:access_token)\=([\S\s]*?)\&/);
				var accessToken;

				if (queryParams) {
					accessToken = queryParams[1]
				}
				
				newwindow.close();
				
				// invoke callback with the token;
				if (callback) {
					callback(accessToken);
				}
			}, false);
			if (window.focus) { newwindow.focus() }
		}

		createPop(fbLoginUrl, 'test');
	}

	// Helper method for fetching the registered login provider options from the API.
	// Every login option will come with a URL matching an endpoint on the backend which must be called
	// to retrieve the login screen for the federated login.
	function getExternalLoginUrl(callback) {
		console.log('getExternalLoginUrl');
		// Return URL for an HTML app is just a local page. This page does NOT need to exist in the app.
		// BUT the return URL has to be in the same domain in order to attach on load eventlisteners.
		var returnUrl = '%2F';//'http:%2F%2Flocalhost%2Fcallback'; //'http:%2F%2Flocalhost:52146%2Fcallback';

		$.ajax({
			url: '/api/Account/ExternalLogins?returnUrl=' + returnUrl + '&generateState=true',
			type: 'GET',
			success: function (response) {
				console.log('getExternalLoginUrl - response', response);

				if (callback) {
					// get the facebook url. Facebook is the first of the returned external login providers
					var fbLoginUrl = response[0].Url;
					callback(fbLoginUrl);
				}
			}
		});
	}

	// When the user has been authenticated and an auth token is retrieved this method is invoked
	function onFacebookAuthenticated(accessToken) {
		console.log('onFacebookAuthenticated', accessToken);

		if (!accessToken) {
			alert('Failed retrieving the Facebook access token');
			return;
		}
		
		// Store the access token
		localStorage.setItem('access_token', accessToken);

		determineUserExistance(accessToken);
	}

	// Gets the details about a user from the backend.
	function getUserInfo(callback) {
		console.log('getUserInfo');

		$.ajax({
			url: '/api/Account/UserInfo',
			type: 'GET',
			headers: {'Authorization': 'Bearer ' + localStorage.getItem('access_token')},
			success: function (response) {
				console.log('getUserInfo - response', response);

				if (callback) {
					callback(response);
				}
			}
		});
	}


	// Checks if a user exists and if not, initiates the register flow
	function determineUserExistance(accessToken) {
		console.log('determineUserExistance');
		getUserInfo(function (userInfo) {
			if (userInfo && userInfo.HasRegistered) {
				// If the user exists in the backend, log the user in
				console.log('determineUserExistance - user exists', userInfo);
				getAuthorizedResource();
			} else {
				// Else take the user through the registration flow
				console.log('determineUserExistance - user NON-existing', userInfo);
				signup(userInfo, getAuthorizedResource);
			}
		});
	}

	// Registers a new user in the backend using the facebook access token
	function signup(userInfo, callback) {
		console.log('determineUserExistance');

		// Get the users Facebook email or let them type in a new email
		var userEmail = 'anders@facebook.com';

		$.ajax({
			url: '/api/Account/RegisterExternal',
			data: {
				email: userEmail
			},
			type: 'POST',
			headers: { 'Authorization': 'Bearer ' + localStorage.getItem('access_token') },
			success: function (response) {
				console.log('getUserInfo - response', response);

				if (callback) {
					callback();
				}
			}
		});
	}

	// Gets a resource from the backend api that requires that you are authorized
	function getAuthorizedResource() {
		console.log('getAuthorizedResource');

		$.ajax({
			url: '/api/Values',
			type: 'GET',
			headers: { 'Authorization': 'Bearer ' + localStorage.getItem('access_token') },
			success: function (response) {
				console.log('getAuthorizedResource - response', response);
			}
		});
	}

	// Gets the facebook users data. To be used when creating a backend user.
	function getFacebookUserData() {

	}

	$(document).ready(function () {
		$('#facebook-login').click(startup);
	});

</script>
