<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS, and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>
<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach
        a broad range of clients, including browsers and mobile devices. ASP.NET Web API
        is an ideal platform for building RESTful applications on the .NET Framework.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301870">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301871">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Web Hosting</h2>
        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301872">Learn more &raquo;</a></p>
    </div>
</div>

<div class="row">
	<div class="col-sm-12">
		<button id="facebook-login">Facebook login</button>
	</div>
</div>

<script src="https://code.jquery.com/jquery-3.2.1.min.js"
				integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
				crossorigin="anonymous"></script>

<script>
	/*
		FACEBOOK LOGIN PROCESS:

		1 - Fetch external login provider URL's from the backend.
				(/api/Account/ExternalLogins?returnUrl)

		2 - Open a popup with the URL fetched in step 1, to display the external login screen.
				When the user logs in the popup window gets redirected back to a specified return
				URL with an access token appended as a hash parameter. The access token is extracted
				from the URL and the popup window is closed.
				(/api/Account/ExternalLogin?provider)

		3 - Determine if a user exists in the backend system matching the external login.
				(/api/Account/UserInfo)

				3A.1 -	If the user does not exist, register it in the backend system by calling
								the RegisterExternal method. This will create a new user instance in the 
								database on the backend.
								(/api/Account/RegisterExternal)
				
				3A.2 -	Log the user in as the newly created user. This is done by calling the 
								ExternalLogin method once more and extracting the new access token.
								(/api/Account/ExternalLogin?provider)

		4 -	Fetch Authorized resource from the backend using the access token.
				
	*/

    var baseUrl = 'http://localhost:52146';//'/';
	// function that runs when the site starts up.
	function startup() {
		console.log('startup');

		if (localStorage.getItem('access_token')) {
			onFacebookAuthenticated(localStorage.getItem('access_token'));
		} else {
		getExternalLoginUrl(function (fbLoginUrl) {
			authenticateWithFacebook(fbLoginUrl, onFacebookAuthenticated);
		});
		}
	}

	// Authenticate with Facebook
	function authenticateWithFacebook(fbLoginUrl, callback) {
		console.log('authenticateWithFacebook');

		var newwindow;
		// WINDOW POPUP VERSION
		function createPop(url, name) {
            newwindow = window.open(baseUrl + url, name, 'width=560,height=340,toolbar=0,menubar=0,location=0');
			newwindow.addEventListener('load', function (e) {
				console.log('popup loaded', e);

				// get access token from url
				var queryParams = e.path[0].location.hash.match(/\#(?:access_token)\=([\S\s]*?)\&/);
				var accessToken;

				if (queryParams) {
					accessToken = queryParams[1]
				}
				
				newwindow.close();
				
				// invoke callback with the token;
				if (callback) {
					callback(accessToken, fbLoginUrl);
				}
			}, false);
			if (window.focus) { newwindow.focus() }
		}

		createPop(fbLoginUrl, 'test');
	}

	// Helper method for fetching the registered login provider options from the API.
	// Every login option will come with a URL matching an endpoint on the backend which must be called
	// to retrieve the login screen for the federated login.
	function getExternalLoginUrl(callback) {
		console.log('getExternalLoginUrl');
		// Return URL for an HTML app is just a local page. This page does NOT need to exist in the app.
		// BUT the return URL has to be in the same domain in order to attach on load eventlisteners.
        var returnUrl = 'http:%2F%2Flocalhost:52146%2Fcallback';//'%2F';//'http:%2F%2Flocalhost%2Fcallback'; //;

		$.ajax({
            url: baseUrl + '/api/Account/ExternalLogins?returnUrl=' + returnUrl + '&generateState=true',
			type: 'GET',
			success: function (response) {
				console.log('getExternalLoginUrl - response', response);

				if (callback) {
					// get the facebook url. Facebook is the first of the returned external login providers
                    var fbLoginUrl = response[0].Url || response[0].url;
					callback(fbLoginUrl);
				}
			}
		});
	}

	// When the user has been authenticated and an auth token is retrieved this method is invoked
	function onFacebookAuthenticated(accessToken, fbLoginUrl) {
		console.log('onFacebookAuthenticated', accessToken);

		if (!accessToken) {
			alert('Failed retrieving the Facebook access token');
			return;
		}
		
		// Store the access token
		localStorage.setItem('access_token', accessToken);

		determineUserExistance(accessToken, fbLoginUrl);
	}

	// Gets the details about a user from the backend.
	function getUserInfo(callback) {
		console.log('getUserInfo');

		$.ajax({
            url: baseUrl + '/api/Account/UserInfo',
			type: 'GET',
			headers: {'Authorization': 'Bearer ' + localStorage.getItem('access_token')},
			success: function (response) {
				console.log('getUserInfo - response', response);

				if (callback) {
					callback(response);
				}
			}
		});
	}


	// Checks if a user exists and if not, initiates the register flow
	function determineUserExistance(accessToken, fbLoginUrl) {
		console.log('determineUserExistance');
		getUserInfo(function (userInfo) {
            if (userInfo && (userInfo.HasRegistered || userInfo.hasRegistered)) {
				// If the user exists in the backend, log the user in
				console.log('determineUserExistance - user exists', userInfo);
				getAuthorizedResource();
				/*authenticateWithFacebook(fbLoginUrl, function () {
					console.log('logged in?')
					getAuthorizedResource();
				});*/
			} else {
				// Else take the user through the registration flow
				console.log('determineUserExistance - user NON-existing', userInfo);
				registerExternalUser(userInfo, function () {
					authenticateWithFacebook(fbLoginUrl, onFacebookAuthenticated);
				});
			}
		});
	}

	// Registers a new user in the backend using the facebook access token
	function registerExternalUser(userInfo, callback) {
		console.log('RegisterExternalUser');

		// Get the users Facebook email or let them type in a new email
		var userEmail = 'anders@facebook.com';

		$.ajax({
            url: baseUrl + '/api/Account/RegisterExternal',
			data: {
				email: userEmail
            },
            xhrFields: {
                withCredentials: true    // Setting this parameter is critical for making the authentication work cross domain
            },
            crossDomain: true,
			type: 'POST',
			headers: { 'Authorization': 'Bearer ' + localStorage.getItem('access_token') },
			success: function (response) {
				console.log('getUserInfo - response', response);

				if (callback) {
					callback();
				}
			}
		});
	}


	// Logs an external user in to our system. Before doing this you have to authorize with facebook and register the user with our system.
	function loginExternalUser(facebookLoginUrl, callback) {
		console.log('loginExternalUser');

		$.ajax({
			//url: '/api/Account/ExternalLogin?provider=Facebook&response_type=token&client_id=self&redirect_uri=http%3A%2F%2Flocalhost%3A15359%2F&state=QotufgXRptkAfJvcthIOWBnGZydgVkZWsx8YrQepeDk1',
            url: baseUrl + facebookLoginUrl,
			type: 'GET',
			success: function (response) {
				console.log('loginExternalUser - response', response);

				if (callback) {
					callback();
				}
			}
		});
	}


	// Gets a resource from the backend api that requires that you are authorized
	function getAuthorizedResource() {
		console.log('getAuthorizedResource');

		$.ajax({
            url: baseUrl + '/api/Values',
			type: 'GET',
			headers: { 'Authorization': 'Bearer ' + localStorage.getItem('access_token') },
			success: function (response) {
				console.log('getAuthorizedResource - response', response);
			}
		});
	}

	// Gets the facebook users data. To be used when creating a backend user.
	function getFacebookUserData() {

	}

	$(document).ready(function () {
		$('#facebook-login').click(startup);
	});

</script>
